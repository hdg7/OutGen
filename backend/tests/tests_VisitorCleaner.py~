import unittest
import VisitorCleaner
import ast
formulas = [
    "Or(And(guard_5, a_0_1_10 == a_0_1_9),And(Not(guard_5), a_0_1_10 == 2))",
    "not(a)",
    "guard_1 == (not(not(b_0_1_2 * y_0_1_1 == 1) and not(x_0_1_1 >= 4)))",
    "guard == (not( not( x_0_1_1 >= 101 ) or y_0_1_1 >= 101))",
    "not( not( x_0_1_1 >= 101 ) and y_0_1_1 >= 101)",
    "not( not( x_0_1_1 <= 101 ) or y_0_1_1 <= 101)",
    "not( not( x_0_1_1 <= 101 ) or y_0_1_1 == 101)",
    "not(  x_0_1_1 >= 101 or y_0_1_1 >= 101)",
    "Or(And(guard_7, b_0_1_14 == b_0_1_13),And(Not(guard_7), b_0_1_14 == b_0_1_8))",
    "not(x_0_1_1 >= 101)",
    "not 2",
    "1+2",
    "1+2*3",
    "1/2",
    "(1+2)*3",
    "sin(x)*x**2",
    "cos(x)",
    "True and False",
    "not(not(b_0_1_2 * y_0_1_1 == ( 1) and not(x_0_1_1 >= 4)))",
    "sin(w*time)"
]

translations = [
    "Or ( And ( guard_5 , ( a_0_1_10 == a_0_1_9 ) ) , And ( Not ( guard_5 ) , ( a_0_1_10 == 2 ) ) )",
    "Not ( a )",
    "( guard_1 == Or ( ( b_0_1_2 * y_0_1_1 == 1 ) , ( x_0_1_1 >= 4 ) ) )",
    "( guard == And ( ( x_0_1_1 >= 101 ) , ( y_0_1_1 < 101 ) ) )",
    "Or ( ( x_0_1_1 >= 101 ) , ( y_0_1_1 < 101 ) )",
    "And ( ( x_0_1_1 <= 101 ) , ( y_0_1_1 > 101 ) )",
    "And ( ( x_0_1_1 <= 101 ) , ( y_0_1_1 /= 101 ) )",
    "And ( ( x_0_1_1 < 101 ) , ( y_0_1_1 < 101 ) )",
    "Or ( And ( guard_7 , ( b_0_1_14 == b_0_1_13 ) ) , And ( Not ( guard_7 ) , ( b_0_1_14 == b_0_1_8 ) ) )",
    "( x_0_1_1 < 101 )",
    "Not ( 2 )",
    "1 + 2",
    "1 + 2 * 3",
    "1 / 2",
    "1 + 2 * 3",
    "sin ( x ) * x pow 2",
    "cos ( x )",
    "And ( True , False )",
    "And ( ( b_0_1_2 * y_0_1_1 == 1 ) , ( x_0_1_1 < 4 ) )",
    "sin ( w * time )"
    ]
class TestVisitorCleaner(unittest.TestCase):

    def test_visitorCleaner(self):
        for index, f in enumerate(formulas):
            visitor = VisitorCleaner.VisitorCleaner()
            visitor.visit(ast.parse(f))
            transLine=' '.join(map(str, visitor.tokens))
            self.assertEqual(transLine,translations[index])

    @staticmethod
    def suite():
        suite = unittest.TestSuite()
        suite.addTest(TestVisitorCleaner('test_visitorCleaner'))
        return suite
